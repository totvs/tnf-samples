// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tnf.SmartX.EntityFramework.PostgreSql;

#nullable disable

namespace Tnf.SmartX.EntityFramework.PostgreSql.Migrations.PostgreSqlCompanyDb
{
    [DbContext(typeof(PostgreSqlCompanyDbContext))]
    partial class PostgreSqlCompanyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasAnnotation("SX:Description", "E-mail da Empresa")
                        .HasAnnotation("SX:Pattern", "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")
                        .HasAnnotation("SX:Title", "E-mail da Empresa");

                    b.Property<bool>("HasEsg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasAnnotation("SX:BooleanLabelFalse", "Não")
                        .HasAnnotation("SX:BooleanLabelTrue", "Sim")
                        .HasAnnotation("SX:Description", "Ignorar autenticação")
                        .HasAnnotation("SX:Title", "Ignorar autenticação");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .HasAnnotation("SX:Description", "Nome da Empresa")
                        .HasAnnotation("SX:Title", "Nome da Empresa");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("RegistrationNumber")
                        .HasAnnotation("SX:Description", "CNPJ")
                        .HasAnnotation("SX:Title", "CNPJ");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TradeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("TradeName")
                        .HasAnnotation("SX:Description", "Nome Fantasia")
                        .HasAnnotation("SX:Title", "Nome Fatansia");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);

                    b.HasAnnotation("SXObject:Description", "Cadastro de Empresas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa6a3c9e-878d-4c82-b556-9383399b84d7"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "contact@acme.com",
                            HasEsg = true,
                            Name = "ACME Corporation",
                            TenantId = new Guid("6bb15e79-b912-481c-9a77-bed8aa1d7247")
                        },
                        new
                        {
                            Id = new Guid("21620343-c576-4a81-8e5e-02548d517e56"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@globex.com",
                            HasEsg = false,
                            Name = "Globex Corporation",
                            TenantId = new Guid("6bb15e79-b912-481c-9a77-bed8aa1d7247")
                        });
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("SX:Title", "Nome do Departamento");

                    b.HasKey("Id")
                        .HasAnnotation("SX:Hidden", true);

                    b.HasIndex("CompanyId");

                    b.ToTable("Departments", (string)null);

                    b
                        .HasAnnotation("SX:Finder", new[] { "CompanyId" })
                        .HasAnnotation("SXObject:Description", "Cadastro de Departamentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("377c28fe-886b-4526-aa4f-561f6483a89b"),
                            CompanyId = new Guid("aa6a3c9e-878d-4c82-b556-9383399b84d7"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "IT"
                        },
                        new
                        {
                            Id = new Guid("783fbd9f-1909-4dd2-b0b1-6fc15802ec5a"),
                            CompanyId = new Guid("aa6a3c9e-878d-4c82-b556-9383399b84d7"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("5438b190-454e-407e-b35c-53b196bb97de"),
                            CompanyId = new Guid("21620343-c576-4a81-8e5e-02548d517e56"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasAnnotation("SX:Pattern", "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")
                        .HasAnnotation("SX:Title", "E-mail do Colaborador");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasAnnotation("SX:Title", "Nome do Colaborador");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:FixedValues", new object[] { "Analista", "Especialista", "Coordenador", "Gerente Executivo" })
                        .HasAnnotation("SX:Title", "Cargo do Colaborador");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.HasKey("Id")
                        .HasAnnotation("SX:Hidden", true);

                    b.HasIndex("TeamId");

                    b.ToTable("Employees", (string)null);

                    b
                        .HasAnnotation("SX:Finder", new[] { "FullName", "EmailAddress" })
                        .HasAnnotation("SXObject:Description", "Colaboradores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5228f999-0193-42d0-aff7-400648cd26ee"),
                            EmailAddress = "john.doe@acme.com",
                            FullName = "John Doe",
                            Position = "Developer",
                            TeamId = new Guid("5f605b21-ebeb-41bc-8cf5-f8cc539f668f")
                        },
                        new
                        {
                            Id = new Guid("0b36f7e8-6b75-499b-9b35-d579e6564c2c"),
                            EmailAddress = "jane.smith@acme.com",
                            FullName = "Jane Smith",
                            Position = "HR Specialist",
                            TeamId = new Guid("78555144-3ccf-4665-b991-beeee015db41")
                        });
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("SX:Title", "Nome do Time");

                    b.HasKey("Id")
                        .HasAnnotation("SX:Hidden", true);

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teams", (string)null);

                    b
                        .HasAnnotation("SX:Finder", new[] { "Name" })
                        .HasAnnotation("SXObject:Description", "Equipes do Departamento");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f605b21-ebeb-41bc-8cf5-f8cc539f668f"),
                            DepartmentId = new Guid("377c28fe-886b-4526-aa4f-561f6483a89b"),
                            Name = "Development"
                        },
                        new
                        {
                            Id = new Guid("122289fe-d0f5-480b-a9c1-bc129d7b0181"),
                            DepartmentId = new Guid("377c28fe-886b-4526-aa4f-561f6483a89b"),
                            Name = "QA"
                        },
                        new
                        {
                            Id = new Guid("78555144-3ccf-4665-b991-beeee015db41"),
                            DepartmentId = new Guid("783fbd9f-1909-4dd2-b0b1-6fc15802ec5a"),
                            Name = "Recruitment"
                        });
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.CompanyEntity", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Departamentos");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.TeamEntity", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Colaboradores");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.TeamEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.DepartmentEntity", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Equipes");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.TeamEntity", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
