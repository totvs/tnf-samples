// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tnf.SmartX.EntityFramework.PostgreSql;

#nullable disable

namespace Tnf.SmartX.EntityFramework.PostgreSql.Migrations.PostgreSqlCustomerDb
{
    [DbContext(typeof(PostgreSqlCustomerDbContext))]
    partial class PostgreSqlCustomerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "Cidade");

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "Estado");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "Rua");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Pattern", "^\\d{8}$")
                        .HasAnnotation("SX:Title", "CEP");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Pattern", "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Pattern", "^(\\(\\d{2}\\)\\s9\\d{4}-\\d{4}|\\d{2}9\\d{8})$");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasAnnotation("SX:Title", "Data de entrega");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:FixedValues", new object[] { "Criado", "Em separação", "Em rota de entrega", "Entregue" })
                        .HasAnnotation("SX:Title", "Status");

                    b.HasKey("Id")
                        .HasAnnotation("SX:Hidden", true);

                    b.HasIndex("AddressId");

                    b.ToTable("Deliveries", (string)null);
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<Guid>("DeliveryId")
                        .HasColumnType("uuid")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasAnnotation("SX:Hidden", true);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "Nome do produto");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasAnnotation("SX:Title", "Quantidade");

                    b.Property<decimal>("WeightKg")
                        .HasColumnType("numeric")
                        .HasAnnotation("SX:Title", "Peso (kg)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveryItems", (string)null);
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.StateEntity", b =>
                {
                    b.Property<string>("UF")
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "UF");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("SX:Title", "Estado");

                    b.HasKey("UF");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.AddressEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.CustomerEntity", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Endereços");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.AddressEntity", "Address")
                        .WithMany("Deliveries")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Entregas");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryItemEntity", b =>
                {
                    b.HasOne("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryEntity", "Delivery")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasAnnotation("SX:RelationTitle", "Itens da entrega");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.AddressEntity", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Tnf.SmartX.Domain.CodeFirst.Entities.DeliveryEntity", b =>
                {
                    b.Navigation("DeliveryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
